[
  {
    "op": "add",
    "path": "/paths/~1ws~1modeling~1commands/get/x-typescript",
    "value": {
      "example": "import { modeling } from '@kittycad/lib'\n\nasync function example() {\n    const response = await modeling.modeling_commands_ws()\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1ws~1executor~1term/get/x-typescript",
    "value": {
      "example": "import { executor } from '@kittycad/lib'\n\nasync function example() {\n    const response = await executor.create_executor_term()\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1users~1{id}~1api-calls/get/x-typescript",
    "value": {
      "example": "import { api_calls } from '@kittycad/lib'\n\nasync function example() {\n    const response = await api_calls.list_api_calls_for_user({\n        id: 'string',\n        limit: 7,\n        page_token: 'string',\n        sort_by: 'created-at-ascending',\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1users~1{id}/get/x-typescript",
    "value": {
      "example": "import { users } from '@kittycad/lib'\n\nasync function example() {\n    const response = await users.get_user({ id: 'string' })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1users-extended~1{id}/get/x-typescript",
    "value": {
      "example": "import { users } from '@kittycad/lib'\n\nasync function example() {\n    const response = await users.get_user_extended({ id: 'string' })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1users-extended/get/x-typescript",
    "value": {
      "example": "import { users } from '@kittycad/lib'\n\nasync function example() {\n    const response = await users.list_users_extended({\n        limit: 7,\n        page_token: 'string',\n        sort_by: 'created-at-ascending',\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1users/get/x-typescript",
    "value": {
      "example": "import { users } from '@kittycad/lib'\n\nasync function example() {\n    const response = await users.list_users({\n        limit: 7,\n        page_token: 'string',\n        sort_by: 'created-at-ascending',\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1session~1{token}/get/x-typescript",
    "value": {
      "example": "import { users } from '@kittycad/lib'\n\nasync function example() {\n    const response = await users.get_session_for_user({ token: 'string' })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1payment~1tax/get/x-typescript",
    "value": {
      "example": "import { payments } from '@kittycad/lib'\n\nasync function example() {\n    const response = await payments.validate_customer_tax_information_for_user()\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1payment~1methods~1{id}/delete/x-typescript",
    "value": {
      "example": "import { payments } from '@kittycad/lib'\n\nasync function example() {\n    const response = await payments.delete_payment_method_for_user({\n        id: 'string',\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1payment~1methods/get/x-typescript",
    "value": {
      "example": "import { payments } from '@kittycad/lib'\n\nasync function example() {\n    const response = await payments.list_payment_methods_for_user()\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1payment~1invoices/get/x-typescript",
    "value": {
      "example": "import { payments } from '@kittycad/lib'\n\nasync function example() {\n    const response = await payments.list_invoices_for_user()\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1payment~1intent/post/x-typescript",
    "value": {
      "example": "import { payments } from '@kittycad/lib'\n\nasync function example() {\n    const response = await payments.create_payment_intent_for_user()\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1payment~1balance/get/x-typescript",
    "value": {
      "example": "import { payments } from '@kittycad/lib'\n\nasync function example() {\n    const response = await payments.get_payment_balance_for_user()\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1payment/put/x-typescript",
    "value": {
      "example": "import { payments } from '@kittycad/lib'\n\nasync function example() {\n    const response = await payments.update_payment_information_for_user()\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1payment/post/x-typescript",
    "value": {
      "example": "import { payments } from '@kittycad/lib'\n\nasync function example() {\n    const response = await payments.create_payment_information_for_user()\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1payment/get/x-typescript",
    "value": {
      "example": "import { payments } from '@kittycad/lib'\n\nasync function example() {\n    const response = await payments.get_payment_information_for_user()\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1payment/delete/x-typescript",
    "value": {
      "example": "import { payments } from '@kittycad/lib'\n\nasync function example() {\n    const response = await payments.delete_payment_information_for_user()\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1onboarding/get/x-typescript",
    "value": {
      "example": "import { users } from '@kittycad/lib'\n\nasync function example() {\n    const response = await users.get_user_onboarding_self()\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1front-hash/get/x-typescript",
    "value": {
      "example": "import { users } from '@kittycad/lib'\n\nasync function example() {\n    const response = await users.get_user_front_hash_self()\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1extended/get/x-typescript",
    "value": {
      "example": "import { users } from '@kittycad/lib'\n\nasync function example() {\n    const response = await users.get_user_self_extended()\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1api-tokens~1{token}/get/x-typescript",
    "value": {
      "example": "import { api_tokens } from '@kittycad/lib'\n\nasync function example() {\n    const response = await api_tokens.get_api_token_for_user({\n        token: 'string',\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1api-tokens~1{token}/delete/x-typescript",
    "value": {
      "example": "import { api_tokens } from '@kittycad/lib'\n\nasync function example() {\n    const response = await api_tokens.delete_api_token_for_user({\n        token: 'string',\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1api-tokens/post/x-typescript",
    "value": {
      "example": "import { api_tokens } from '@kittycad/lib'\n\nasync function example() {\n    const response = await api_tokens.create_api_token_for_user()\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1api-tokens/get/x-typescript",
    "value": {
      "example": "import { api_tokens } from '@kittycad/lib'\n\nasync function example() {\n    const response = await api_tokens.list_api_tokens_for_user({\n        limit: 7,\n        page_token: 'string',\n        sort_by: 'created-at-ascending',\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1api-calls~1{id}/get/x-typescript",
    "value": {
      "example": "import { api_calls } from '@kittycad/lib'\n\nasync function example() {\n    const response = await api_calls.get_api_call_for_user({ id: 'string' })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1api-calls/get/x-typescript",
    "value": {
      "example": "import { api_calls } from '@kittycad/lib'\n\nasync function example() {\n    const response = await api_calls.user_list_api_calls({\n        limit: 7,\n        page_token: 'string',\n        sort_by: 'created-at-ascending',\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user/put/x-typescript",
    "value": {
      "example": "import { users } from '@kittycad/lib'\n\nasync function example() {\n    const response = await users.update_user_self()\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user/get/x-typescript",
    "value": {
      "example": "import { users } from '@kittycad/lib'\n\nasync function example() {\n    const response = await users.get_user_self()\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user/delete/x-typescript",
    "value": {
      "example": "import { users } from '@kittycad/lib'\n\nasync function example() {\n    const response = await users.delete_user_self()\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1volume~1{input_unit}~1{output_unit}/get/x-typescript",
    "value": {
      "example": "import { unit } from '@kittycad/lib'\n\nasync function example() {\n    const response = await unit.get_volume_unit_conversion({\n        input_unit: 'cm3',\n        output_unit: 'ft3',\n        value: 7,\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1torque~1{input_unit}~1{output_unit}/get/x-typescript",
    "value": {
      "example": "import { unit } from '@kittycad/lib'\n\nasync function example() {\n    const response = await unit.get_torque_unit_conversion({\n        input_unit: 'newton_metres',\n        output_unit: 'pound_foot',\n        value: 7,\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1temperature~1{input_unit}~1{output_unit}/get/x-typescript",
    "value": {
      "example": "import { unit } from '@kittycad/lib'\n\nasync function example() {\n    const response = await unit.get_temperature_unit_conversion({\n        input_unit: 'celsius',\n        output_unit: 'fahrenheit',\n        value: 7,\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1pressure~1{input_unit}~1{output_unit}/get/x-typescript",
    "value": {
      "example": "import { unit } from '@kittycad/lib'\n\nasync function example() {\n    const response = await unit.get_pressure_unit_conversion({\n        input_unit: 'atmospheres',\n        output_unit: 'bars',\n        value: 7,\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1power~1{input_unit}~1{output_unit}/get/x-typescript",
    "value": {
      "example": "import { unit } from '@kittycad/lib'\n\nasync function example() {\n    const response = await unit.get_power_unit_conversion({\n        input_unit: 'btu_per_minute',\n        output_unit: 'horsepower',\n        value: 7,\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1mass~1{input_unit}~1{output_unit}/get/x-typescript",
    "value": {
      "example": "import { unit } from '@kittycad/lib'\n\nasync function example() {\n    const response = await unit.get_mass_unit_conversion({\n        input_unit: 'g',\n        output_unit: 'kg',\n        value: 7,\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1length~1{input_unit}~1{output_unit}/get/x-typescript",
    "value": {
      "example": "import { unit } from '@kittycad/lib'\n\nasync function example() {\n    const response = await unit.get_length_unit_conversion({\n        input_unit: 'cm',\n        output_unit: 'ft',\n        value: 7,\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1frequency~1{input_unit}~1{output_unit}/get/x-typescript",
    "value": {
      "example": "import { unit } from '@kittycad/lib'\n\nasync function example() {\n    const response = await unit.get_frequency_unit_conversion({\n        input_unit: 'gigahertz',\n        output_unit: 'hertz',\n        value: 7,\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1force~1{input_unit}~1{output_unit}/get/x-typescript",
    "value": {
      "example": "import { unit } from '@kittycad/lib'\n\nasync function example() {\n    const response = await unit.get_force_unit_conversion({\n        input_unit: 'dynes',\n        output_unit: 'kiloponds',\n        value: 7,\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1energy~1{input_unit}~1{output_unit}/get/x-typescript",
    "value": {
      "example": "import { unit } from '@kittycad/lib'\n\nasync function example() {\n    const response = await unit.get_energy_unit_conversion({\n        input_unit: 'btu',\n        output_unit: 'electronvolts',\n        value: 7,\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1current~1{input_unit}~1{output_unit}/get/x-typescript",
    "value": {
      "example": "import { unit } from '@kittycad/lib'\n\nasync function example() {\n    const response = await unit.get_current_unit_conversion({\n        input_unit: 'amperes',\n        output_unit: 'microamperes',\n        value: 7,\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1area~1{input_unit}~1{output_unit}/get/x-typescript",
    "value": {
      "example": "import { unit } from '@kittycad/lib'\n\nasync function example() {\n    const response = await unit.get_area_unit_conversion({\n        input_unit: 'cm2',\n        output_unit: 'dm2',\n        value: 7,\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1angle~1{input_unit}~1{output_unit}/get/x-typescript",
    "value": {
      "example": "import { unit } from '@kittycad/lib'\n\nasync function example() {\n    const response = await unit.get_angle_unit_conversion({\n        input_unit: 'degrees',\n        output_unit: 'radians',\n        value: 7,\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1ping/get/x-typescript",
    "value": {
      "example": "import { meta } from '@kittycad/lib'\n\nasync function example() {\n    const response = await meta.ping()\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1openai~1openapi.json/get/x-typescript",
    "value": {
      "example": "import { meta } from '@kittycad/lib'\n\nasync function example() {\n    const response = await meta.get_openai_schema()\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1oauth2~1provider~1{provider}~1consent/get/x-typescript",
    "value": {
      "example": "import { oauth2 } from '@kittycad/lib'\n\nasync function example() {\n    const response = await oauth2.oauth2_provider_consent({\n        provider: 'google',\n        callback_url: 'string',\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1oauth2~1provider~1{provider}~1callback/get/x-typescript",
    "value": {
      "example": "import { oauth2 } from '@kittycad/lib'\n\nasync function example() {\n    const response = await oauth2.oauth2_provider_callback({\n        provider: 'google',\n        code: 'string',\n        state: 'string',\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1oauth2~1device~1verify/get/x-typescript",
    "value": {
      "example": "import { oauth2 } from '@kittycad/lib'\n\nasync function example() {\n    const response = await oauth2.device_auth_verify({ user_code: 'string' })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1oauth2~1device~1token/post/x-typescript",
    "value": {
      "example": "import { oauth2 } from '@kittycad/lib'\n\nasync function example() {\n    const response = await oauth2.device_access_token()\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1oauth2~1device~1confirm/post/x-typescript",
    "value": {
      "example": "import { oauth2 } from '@kittycad/lib'\n\nasync function example() {\n    const response = await oauth2.device_auth_confirm()\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1oauth2~1device~1auth/post/x-typescript",
    "value": {
      "example": "import { oauth2 } from '@kittycad/lib'\n\nasync function example() {\n    const response = await oauth2.device_auth_request()\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1modeling~1cmd_batch/post/x-typescript",
    "value": {
      "example": "import { modeling } from '@kittycad/lib'\n\nasync function example() {\n    const response = await modeling.cmd_batch()\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1modeling~1cmd/post/x-typescript",
    "value": {
      "example": "import { modeling } from '@kittycad/lib'\n\nasync function example() {\n    const response = await modeling.cmd()\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1file~1volume/post/x-typescript",
    "value": {
      "example": "import fsp from 'fs/promises'\nimport { file } from '@kittycad/lib'\n\nasync function example() {\n    const response = await file.create_file_volume({\n        output_unit: 'ft3',\n        src_format: 'obj',\n        body: await fsp.readFile('./example.obj', 'base64'),\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1file~1surface-area/post/x-typescript",
    "value": {
      "example": "import fsp from 'fs/promises'\nimport { file } from '@kittycad/lib'\n\nasync function example() {\n    const response = await file.create_file_surface_area({\n        output_unit: 'dm2',\n        src_format: 'obj',\n        body: await fsp.readFile('./example.obj', 'base64'),\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1file~1mass/post/x-typescript",
    "value": {
      "example": "import fsp from 'fs/promises'\nimport { file } from '@kittycad/lib'\n\nasync function example() {\n    const response = await file.create_file_mass({\n        material_density: 7,\n        material_density_unit: 'lb:ft3',\n        output_unit: 'kg',\n        src_format: 'obj',\n        body: await fsp.readFile('./example.obj', 'base64'),\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1file~1execute~1{lang}/post/x-typescript",
    "value": {
      "example": "import fsp from 'fs/promises'\nimport { executor } from '@kittycad/lib'\n\nasync function example() {\n    const response = await executor.create_file_execution({\n        lang: 'go',\n        output: 'string',\n        body: await fsp.readFile('./example', 'base64'),\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1file~1density/post/x-typescript",
    "value": {
      "example": "import fsp from 'fs/promises'\nimport { file } from '@kittycad/lib'\n\nasync function example() {\n    const response = await file.create_file_density({\n        material_mass: 7,\n        material_mass_unit: 'g',\n        output_unit: 'kg:m3',\n        src_format: 'obj',\n        body: await fsp.readFile('./example.obj', 'base64'),\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1file~1conversion~1{src_format}~1{output_format}/post/x-typescript",
    "value": {
      "example": "import fsp from 'fs/promises'\nimport { file } from '@kittycad/lib'\n\nasync function example() {\n    const response = await file.create_file_conversion({\n        output_format: 'stl',\n        src_format: 'obj',\n        body: await fsp.readFile('./example.obj', 'base64'),\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1file~1center-of-mass/post/x-typescript",
    "value": {
      "example": "import fsp from 'fs/promises'\nimport { file } from '@kittycad/lib'\n\nasync function example() {\n    const response = await file.create_file_center_of_mass({\n        output_unit: 'ft',\n        src_format: 'obj',\n        body: await fsp.readFile('./example.obj', 'base64'),\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1constant~1physics~1{constant}/get/x-typescript",
    "value": {
      "example": "import { constant } from '@kittycad/lib'\n\nasync function example() {\n    const response = await constant.get_physics_constant({ constant: 'pi' })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1async~1operations~1{id}/get/x-typescript",
    "value": {
      "example": "import { api_calls } from '@kittycad/lib'\n\nasync function example() {\n    const response = await api_calls.get_async_operation({ id: 'string' })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1async~1operations/get/x-typescript",
    "value": {
      "example": "import { api_calls } from '@kittycad/lib'\n\nasync function example() {\n    const response = await api_calls.list_async_operations({\n        limit: 7,\n        page_token: 'string',\n        sort_by: 'created-at-ascending',\n        status: 'Queued',\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1apps~1github~1webhook/post/x-typescript",
    "value": {
      "example": "import fsp from 'fs/promises'\nimport { apps } from '@kittycad/lib'\n\nasync function example() {\n    const response = await apps.apps_github_webhook({\n        body: await fsp.readFile('./example', 'base64'),\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1apps~1github~1consent/get/x-typescript",
    "value": {
      "example": "import { apps } from '@kittycad/lib'\n\nasync function example() {\n    const response = await apps.apps_github_consent()\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1apps~1github~1callback/get/x-typescript",
    "value": {
      "example": "import { apps } from '@kittycad/lib'\n\nasync function example() {\n    const response = await apps.apps_github_callback()\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1api-calls~1{id}/get/x-typescript",
    "value": {
      "example": "import { api_calls } from '@kittycad/lib'\n\nasync function example() {\n    const response = await api_calls.get_api_call({ id: 'string' })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1api-calls/get/x-typescript",
    "value": {
      "example": "import { api_calls } from '@kittycad/lib'\n\nasync function example() {\n    const response = await api_calls.list_api_calls({\n        limit: 7,\n        page_token: 'string',\n        sort_by: 'created-at-ascending',\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1api-call-metrics/get/x-typescript",
    "value": {
      "example": "import { api_calls } from '@kittycad/lib'\n\nasync function example() {\n    const response = await api_calls.get_api_call_metrics({ group_by: 'email' })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1ai~1text-to-3d~1{output_format}/post/x-typescript",
    "value": {
      "example": "import { ai } from '@kittycad/lib'\n\nasync function example() {\n    const response = await ai.create_text_to_3d({\n        output_format: 'stl',\n        prompt: 'string',\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1ai~1image-to-3d~1{input_format}~1{output_format}/post/x-typescript",
    "value": {
      "example": "import fsp from 'fs/promises'\nimport { ai } from '@kittycad/lib'\n\nasync function example() {\n    const response = await ai.create_image_to_3d({\n        input_format: 'jpg',\n        output_format: 'stl',\n        body: await fsp.readFile('./example', 'base64'),\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1_meta~1info/get/x-typescript",
    "value": {
      "example": "import { meta } from '@kittycad/lib'\n\nasync function example() {\n    const response = await meta.get_metadata()\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1.well-known~1ai-plugin.json/get/x-typescript",
    "value": {
      "example": "import { meta } from '@kittycad/lib'\n\nasync function example() {\n    const response = await meta.get_ai_plugin_manifest()\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1/get/x-typescript",
    "value": {
      "example": "import { meta } from '@kittycad/lib'\n\nasync function example() {\n    const response = await meta.get_schema()\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/info/x-typescript",
    "value": {
      "client": "// Create a client with your token.\nasync function ExampleWithClient() {\n  const client = new Client('your-token');\n  const response = await meta.ping({ client });\n  if ('error_code' in response) throw 'error';\n  console.log(response.message); // 'pong'\n}\n\n// - OR -\n\n// Your token will be parsed from the environment\n// variable: 'KITTYCAD_TOKEN'.\nasync function ExampleWithOutClient() {\n  const response = await meta.ping();\n  if ('error_code' in response) throw 'error';\n  console.log(response.message); // 'pong'\n}",
      "install": "npm install @kittycad/lib\n# or \n$ yarn add @kittycad/lib"
    }
  }
]
