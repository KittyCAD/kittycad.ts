[
  {
    "op": "add",
    "path": "/paths/~1user~1session~1{token}/get/x-typescript",
    "value": {
      "example": "import { sessions } from '@kittycad/lib'\n\nasync function example() {\n    const response = await sessions.get_session_for_user({ token: 'string' })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1payment~1methods/get/x-typescript",
    "value": {
      "example": "import { payments } from '@kittycad/lib'\n\nasync function example() {\n    const response = await payments.list_payment_methods_for_user()\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1payment~1invoices/get/x-typescript",
    "value": {
      "example": "import { payments } from '@kittycad/lib'\n\nasync function example() {\n    const response = await payments.list_invoices_for_user()\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1payment~1balance/get/x-typescript",
    "value": {
      "example": "import { payments } from '@kittycad/lib'\n\nasync function example() {\n    const response = await payments.get_payment_balance_for_user()\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1payment/put/x-typescript",
    "value": {
      "example": "import { payments } from '@kittycad/lib'\n\nasync function example() {\n    const response = await payments.update_payment_information_for_user()\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1payment/post/x-typescript",
    "value": {
      "example": "import { payments } from '@kittycad/lib'\n\nasync function example() {\n    const response = await payments.create_payment_information_for_user()\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1payment/get/x-typescript",
    "value": {
      "example": "import { payments } from '@kittycad/lib'\n\nasync function example() {\n    const response = await payments.get_payment_information_for_user()\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1payment/delete/x-typescript",
    "value": {
      "example": "import { payments } from '@kittycad/lib'\n\nasync function example() {\n    const response = await payments.delete_payment_information_for_user()\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1extended/get/x-typescript",
    "value": {
      "example": "import { users } from '@kittycad/lib'\n\nasync function example() {\n    const response = await users.get_user_self_extended()\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1api-tokens~1{token}/get/x-typescript",
    "value": {
      "example": "import { api_tokens } from '@kittycad/lib'\n\nasync function example() {\n    const response = await api_tokens.get_api_token_for_user({\n        token: 'string',\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1api-tokens~1{token}/delete/x-typescript",
    "value": {
      "example": "import { api_tokens } from '@kittycad/lib'\n\nasync function example() {\n    const response = await api_tokens.delete_api_token_for_user({\n        token: 'string',\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1api-tokens/post/x-typescript",
    "value": {
      "example": "import { api_tokens } from '@kittycad/lib'\n\nasync function example() {\n    const response = await api_tokens.create_api_token_for_user()\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1api-tokens/get/x-typescript",
    "value": {
      "example": "import { api_tokens } from '@kittycad/lib'\n\nasync function example() {\n    const response = await api_tokens.list_api_tokens_for_user({\n        limit: 7,\n        page_token: 'string',\n        sort_by: 'created-at-descending',\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1api-calls~1{id}/get/x-typescript",
    "value": {
      "example": "import { api_calls } from '@kittycad/lib'\n\nasync function example() {\n    const response = await api_calls.get_api_call_for_user({ id: 'string' })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user~1api-calls/get/x-typescript",
    "value": {
      "example": "import { api_calls } from '@kittycad/lib'\n\nasync function example() {\n    const response = await api_calls.user_list_api_calls({\n        limit: 7,\n        page_token: 'string',\n        sort_by: 'created-at-descending',\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user/put/x-typescript",
    "value": {
      "example": "import { users } from '@kittycad/lib'\n\nasync function example() {\n    const response = await users.update_user_self()\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user/get/x-typescript",
    "value": {
      "example": "import { users } from '@kittycad/lib'\n\nasync function example() {\n    const response = await users.get_user_self()\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1user/delete/x-typescript",
    "value": {
      "example": "import { users } from '@kittycad/lib'\n\nasync function example() {\n    const response = await users.delete_user_self()\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1volume~1{src_format}~1{output_format}/get/x-typescript",
    "value": {
      "example": "import { unit } from '@kittycad/lib'\n\nasync function example() {\n    const response = await unit.get_volume_unit_conversion({\n        output_format: 'cubic_meter',\n        src_format: 'cubic_centimeter',\n        value: 7,\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1voltage~1{src_format}~1{output_format}/get/x-typescript",
    "value": {
      "example": "import { unit } from '@kittycad/lib'\n\nasync function example() {\n    const response = await unit.get_voltage_unit_conversion({\n        output_format: 'volt',\n        src_format: 'statvolt',\n        value: 7,\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1velocity~1{src_format}~1{output_format}/get/x-typescript",
    "value": {
      "example": "import { unit } from '@kittycad/lib'\n\nasync function example() {\n    const response = await unit.get_velocity_unit_conversion({\n        output_format: 'meters_per_second',\n        src_format: 'feet_per_second',\n        value: 7,\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1time~1{src_format}~1{output_format}/get/x-typescript",
    "value": {
      "example": "import { unit } from '@kittycad/lib'\n\nasync function example() {\n    const response = await unit.get_time_unit_conversion({\n        output_format: 'second',\n        src_format: 'minute',\n        value: 7,\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1temperature~1{src_format}~1{output_format}/get/x-typescript",
    "value": {
      "example": "import { unit } from '@kittycad/lib'\n\nasync function example() {\n    const response = await unit.get_temperature_unit_conversion({\n        output_format: 'kelvin',\n        src_format: 'celsius',\n        value: 7,\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1solid-angle~1{src_format}~1{output_format}/get/x-typescript",
    "value": {
      "example": "import { unit } from '@kittycad/lib'\n\nasync function example() {\n    const response = await unit.get_solid_angle_unit_conversion({\n        output_format: 'steradian',\n        src_format: 'degree_squared',\n        value: 7,\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1radioactivity~1{src_format}~1{output_format}/get/x-typescript",
    "value": {
      "example": "import { unit } from '@kittycad/lib'\n\nasync function example() {\n    const response = await unit.get_radioactivity_unit_conversion({\n        output_format: 'becquerel',\n        src_format: 'curie',\n        value: 7,\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1radiation~1{src_format}~1{output_format}/get/x-typescript",
    "value": {
      "example": "import { unit } from '@kittycad/lib'\n\nasync function example() {\n    const response = await unit.get_radiation_unit_conversion({\n        output_format: 'gray',\n        src_format: 'sievert',\n        value: 7,\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1pressure~1{src_format}~1{output_format}/get/x-typescript",
    "value": {
      "example": "import { unit } from '@kittycad/lib'\n\nasync function example() {\n    const response = await unit.get_pressure_unit_conversion({\n        output_format: 'pascal',\n        src_format: 'bar',\n        value: 7,\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1power~1{src_format}~1{output_format}/get/x-typescript",
    "value": {
      "example": "import { unit } from '@kittycad/lib'\n\nasync function example() {\n    const response = await unit.get_power_unit_conversion({\n        output_format: 'watt',\n        src_format: 'horsepower',\n        value: 7,\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1metric~1squared~1{src_format}~1{output_format}/get/x-typescript",
    "value": {
      "example": "import { unit } from '@kittycad/lib'\n\nasync function example() {\n    const response = await unit.get_metric_power_squared_unit_conversion({\n        output_format: 'atto',\n        src_format: 'femto',\n        value: 7,\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1metric~1power~1{src_format}~1{output_format}/get/x-typescript",
    "value": {
      "example": "import { unit } from '@kittycad/lib'\n\nasync function example() {\n    const response = await unit.get_metric_power_unit_conversion({\n        output_format: 'atto',\n        src_format: 'femto',\n        value: 7,\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1metric~1cubed~1{src_format}~1{output_format}/get/x-typescript",
    "value": {
      "example": "import { unit } from '@kittycad/lib'\n\nasync function example() {\n    const response = await unit.get_metric_power_cubed_unit_conversion({\n        output_format: 'atto',\n        src_format: 'femto',\n        value: 7,\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1mass~1{src_format}~1{output_format}/get/x-typescript",
    "value": {
      "example": "import { unit } from '@kittycad/lib'\n\nasync function example() {\n    const response = await unit.get_mass_unit_conversion({\n        output_format: 'gram',\n        src_format: 'kilogram',\n        value: 7,\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1magnetic-flux~1{src_format}~1{output_format}/get/x-typescript",
    "value": {
      "example": "import { unit } from '@kittycad/lib'\n\nasync function example() {\n    const response = await unit.get_magnetic_flux_unit_conversion({\n        output_format: 'weber',\n        src_format: 'maxwell',\n        value: 7,\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1magnetic-field-strength~1{src_format}~1{output_format}/get/x-typescript",
    "value": {
      "example": "import { unit } from '@kittycad/lib'\n\nasync function example() {\n    const response = await unit.get_magnetic_field_strength_unit_conversion({\n        output_format: 'tesla',\n        src_format: 'gauss',\n        value: 7,\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1length~1{src_format}~1{output_format}/get/x-typescript",
    "value": {
      "example": "import { unit } from '@kittycad/lib'\n\nasync function example() {\n    const response = await unit.get_length_unit_conversion({\n        output_format: 'meter',\n        src_format: 'millimeter',\n        value: 7,\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1illuminance~1{src_format}~1{output_format}/get/x-typescript",
    "value": {
      "example": "import { unit } from '@kittycad/lib'\n\nasync function example() {\n    const response = await unit.get_illuminance_unit_conversion({\n        output_format: 'lux',\n        src_format: 'footcandle',\n        value: 7,\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1force~1{src_format}~1{output_format}/get/x-typescript",
    "value": {
      "example": "import { unit } from '@kittycad/lib'\n\nasync function example() {\n    const response = await unit.get_force_unit_conversion({\n        output_format: 'newton',\n        src_format: 'pound',\n        value: 7,\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1energy~1{src_format}~1{output_format}/get/x-typescript",
    "value": {
      "example": "import { unit } from '@kittycad/lib'\n\nasync function example() {\n    const response = await unit.get_energy_unit_conversion({\n        output_format: 'joule',\n        src_format: 'calorie',\n        value: 7,\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1density~1{src_format}~1{output_format}/get/x-typescript",
    "value": {
      "example": "import { unit } from '@kittycad/lib'\n\nasync function example() {\n    const response = await unit.get_density_unit_conversion({\n        output_format: 'kilograms_per_cubic_meter',\n        src_format: 'grams_per_milliliter',\n        value: 7,\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1data~1{src_format}~1{output_format}/get/x-typescript",
    "value": {
      "example": "import { unit } from '@kittycad/lib'\n\nasync function example() {\n    const response = await unit.get_data_unit_conversion({\n        output_format: 'byte',\n        src_format: 'exabyte',\n        value: 7,\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1data-transfer-rate~1{src_format}~1{output_format}/get/x-typescript",
    "value": {
      "example": "import { unit } from '@kittycad/lib'\n\nasync function example() {\n    const response = await unit.get_data_transfer_rate_unit_conversion({\n        output_format: 'bytes_per_second',\n        src_format: 'exabytes_per_second',\n        value: 7,\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1concentration~1{src_format}~1{output_format}/get/x-typescript",
    "value": {
      "example": "import { unit } from '@kittycad/lib'\n\nasync function example() {\n    const response = await unit.get_concentration_unit_conversion({\n        output_format: 'parts_per_million',\n        src_format: 'parts_per_billion',\n        value: 7,\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1charge~1{src_format}~1{output_format}/get/x-typescript",
    "value": {
      "example": "import { unit } from '@kittycad/lib'\n\nasync function example() {\n    const response = await unit.get_charge_unit_conversion({\n        output_format: 'coulomb',\n        src_format: 'ampere_hour',\n        value: 7,\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1area~1{src_format}~1{output_format}/get/x-typescript",
    "value": {
      "example": "import { unit } from '@kittycad/lib'\n\nasync function example() {\n    const response = await unit.get_area_unit_conversion({\n        output_format: 'square_meter',\n        src_format: 'square_foot',\n        value: 7,\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1angular-velocity~1{src_format}~1{output_format}/get/x-typescript",
    "value": {
      "example": "import { unit } from '@kittycad/lib'\n\nasync function example() {\n    const response = await unit.get_angular_velocity_unit_conversion({\n        output_format: 'radians_per_second',\n        src_format: 'degrees_per_second',\n        value: 7,\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1angle~1{src_format}~1{output_format}/get/x-typescript",
    "value": {
      "example": "import { unit } from '@kittycad/lib'\n\nasync function example() {\n    const response = await unit.get_angle_unit_conversion({\n        output_format: 'radian',\n        src_format: 'degree',\n        value: 7,\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1unit~1conversion~1acceleration~1{src_format}~1{output_format}/get/x-typescript",
    "value": {
      "example": "import { unit } from '@kittycad/lib'\n\nasync function example() {\n    const response = await unit.get_acceleration_unit_conversion({\n        output_format: 'meters_per_second_squared',\n        src_format: 'feet_per_second_squared',\n        value: 7,\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1ping/get/x-typescript",
    "value": {
      "example": "import { meta } from '@kittycad/lib'\n\nasync function example() {\n    const response = await meta.ping()\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1file~1volume/post/x-typescript",
    "value": {
      "example": "import fsp from 'fs/promises'\nimport { file } from '@kittycad/lib'\n\nasync function example() {\n    const response = await file.create_file_volume({\n        src_format: 'obj',\n        body: await fsp.readFile('./example.obj', 'base64'),\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1file~1surface-area/post/x-typescript",
    "value": {
      "example": "import fsp from 'fs/promises'\nimport { file } from '@kittycad/lib'\n\nasync function example() {\n    const response = await file.create_file_surface_area({\n        src_format: 'obj',\n        body: await fsp.readFile('./example.obj', 'base64'),\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1file~1mass/post/x-typescript",
    "value": {
      "example": "import fsp from 'fs/promises'\nimport { file } from '@kittycad/lib'\n\nasync function example() {\n    const response = await file.create_file_mass({\n        material_density: 7,\n        src_format: 'obj',\n        body: await fsp.readFile('./example.obj', 'base64'),\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1file~1density/post/x-typescript",
    "value": {
      "example": "import fsp from 'fs/promises'\nimport { file } from '@kittycad/lib'\n\nasync function example() {\n    const response = await file.create_file_density({\n        material_mass: 7,\n        src_format: 'obj',\n        body: await fsp.readFile('./example.obj', 'base64'),\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1file~1conversion~1{src_format}~1{output_format}/post/x-typescript",
    "value": {
      "example": "import fsp from 'fs/promises'\nimport { file } from '@kittycad/lib'\n\nasync function example() {\n    const response = await file.create_file_conversion({\n        output_format: 'dae',\n        src_format: 'obj',\n        body: await fsp.readFile('./example.obj', 'base64'),\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1file~1center-of-mass/post/x-typescript",
    "value": {
      "example": "import fsp from 'fs/promises'\nimport { file } from '@kittycad/lib'\n\nasync function example() {\n    const response = await file.create_file_center_of_mass({\n        src_format: 'obj',\n        body: await fsp.readFile('./example.obj', 'base64'),\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1file~12d~1vector~1conversion~1{src_format}~1{output_format}/post/x-typescript",
    "value": {
      "example": "import fsp from 'fs/promises'\nimport { file } from '@kittycad/lib'\n\nasync function example() {\n    const response = await file.create_file_2d_vector_conversion({\n        output_format: 'dxf',\n        src_format: 'svg',\n        body: await fsp.readFile('./example.svg', 'base64'),\n    })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1async~1operations~1{id}/get/x-typescript",
    "value": {
      "example": "import { api_calls } from '@kittycad/lib'\n\nasync function example() {\n    const response = await api_calls.get_async_operation({ id: 'string' })\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/paths/~1/get/x-typescript",
    "value": {
      "example": "import { meta } from '@kittycad/lib'\n\nasync function example() {\n    const response = await meta.get_schema()\n    if ('error_code' in response) throw response\n    console.log(JSON.stringify(response, null, 2))\n}\n",
      "libDocsLink": ""
    }
  },
  {
    "op": "add",
    "path": "/info/x-typescript",
    "value": {
      "client": "// Create a client with your token.\nasync function ExampleWithClient() {\n  const client = new Client('your-token');\n  const response = await meta.ping({ client });\n  if ('error_code' in response) throw 'error';\n  console.log(response.message); // 'pong'\n}\n\n// - OR -\n\n// Your token will be parsed from the environment\n// variable: 'KITTYCAD_TOKEN'.\nasync function ExampleWithOutClient() {\n  const response = await meta.ping();\n  if ('error_code' in response) throw 'error';\n  console.log(response.message); // 'pong'\n}",
      "install": "npm install @kittycad/lib\n# or \n$ yarn add @kittycad/lib"
    }
  }
]
