import { Client, buildQuery } from '../../client.js';
import { throwIfNotOk } from '../../errors.js';
{{#if pager}}
import { Pager, createPager } from '../../pagination.js';
{{/if}}

{{{importsModels}}}

{{{paramsInterface}}}

{{{returnType}}}

{{{fnJsDoc}}}
export default async function {{functionName}}(
  {{{paramsSignature}}}
): Promise<{{returnTypeName}}> {
  const path = {{{urlPathExpr}}};
  const qs = buildQuery({{{queryObjectExpr}}});
  const url = path + qs;
  // Backwards compatible for the BASE_URL env variable
  // That used to exist in only this lib, ZOO_HOST exists in the all the other
  // sdks and the CLI.
  const urlBase = client?.baseUrl || process?.env?.ZOO_HOST || process?.env?.BASE_URL || 'https://api.zoo.dev';
  const fullUrl = urlBase + url;
  // The other sdks use to use KITTYCAD_API_TOKEN, now they still do for
  // backwards compatibility, but the new standard is ZOO_API_TOKEN.
  // For some reason only this lib supported KITTYCAD_TOKEN, so we need to
  // check for that as well.
  const kittycadToken = client
    ? client.token || process.env.ZOO_API_TOKEN || ''
    : process.env.KITTYCAD_TOKEN ||
      process.env.KITTYCAD_API_TOKEN ||
      process.env.ZOO_API_TOKEN ||
      '';
  const headers: Record<string, string> = {};
  if (kittycadToken) headers.Authorization = `Bearer ${kittycadToken}`;
  {{#unless omitContentType}}
  headers['Content-Type'] = '{{contentType}}';
  {{/unless}}
  const fetchOptions: RequestInit = {
    method: '{{httpMethod}}',
    headers,
    {{#if bodyLine}}
    {{{bodyLine}}},
    {{/if}}
  };
  const _fetch = client?.fetch || fetch;
  const response = await _fetch(fullUrl, fetchOptions);
  await throwIfNotOk(response);
  {{#if noJsonResponse}}
  return undefined as {{returnTypeName}};
  {{else}}
  const result = (await response.json()) as {{returnTypeName}};
  return result;
  {{/if}}
}

{{#if pager}}
export function {{pagerFnName}}(
  params: {{paramsInterfaceName}}
): Pager<{{paramsInterfaceName}}, {{returnTypeName}}, {{pagerItemTypeName}}> {
  return createPager<{{paramsInterfaceName}}, {{returnTypeName}}, {{pagerItemTypeName}}>(
    {{functionName}},
    params,
    'page_token'
  );
}
{{/if}}
